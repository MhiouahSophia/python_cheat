import pandas as pd
import numpy as np
import datetime as dt

################ COLUMN TREATMENT

df.dtypes
df.describe()
df.rename(columns={'old_name': 'new_name'}, inplace=True)
df.drop(['column1', ['column2']], axis=1, inplace=True)

df['ALTERNATIVE'] = df[alternative].idxmax(axis=1)# multiple column to one

df[['column1', 'column2']].drop_duplicates()
df['column1'].value_counts()


df['column1'] = df['column1'].map({'A': 1, 'B': 2}).astype(int)
df['column2'] = df['column2'].apply(lambda x: hash(x))

df_quali = pd.DataFrame(pd.get_dummies(df_quali))# get_dummies for qualitative variable
df = pd.concat([data_quali, data_quanti], axis=1)

print(X_train.shape, X_test.shape)


################ ROW FILTER

#exemple1:
X_test = X.loc[X['year'].isin([2018])]

y_test = y.loc[X_test.index]

X_train = X.loc[X['year'].isin([2016, 2017])]
y_train = y.loc[X_train.index]



################ GROUP BY

#exemple1:
df.groupby(['market']).apply(lambda x: pd.Series({'MSE': mean_squared_error(x['y_true'], x['y_pred'])})).reset_index()

#exemple2:
df.groupby(['DBD']).apply(lambda x: pd.Series({
    'Perc_annulation': (sum(abs(x['NET_BKG'][x['NET_BKG'] < 0])) / sum(abs(x['NET_BKG'][x['NET_BKG'] > 0]))) *100
    })
    ).reset_index()


############### BOX PLOT

#exemple1:
df.boxplot('RES_IDV', by='TRANCHE', rot=90)
df.boxplot('RES_IDV', by='ESPACE', rot=90)



############### DATE TREATMENT 

df['DATE'] = pd.to_datetime(df['DATE'], format="%d/%m/%Y")# convert to datetime object

df["year"] = df['DATE'].dt.year
df["month"] = df['DATE'].dt.month
# df["day"] = df['DATE'].dt.day
# df["hour"] = df['DATE'].dt.hour
df["dayofyear"] = df['DATE'].dt.dayofyear
df["weekofyear"] = df['DATE'].dt.weekofyear
df["dayofweek"] = df['DATE'].dt.dayofweek
df["quarter"] = df['DATE'].dt.quarter


df["month_sin"] = np.sin(df["month"]*(2.*np.pi/12))
df["month_cos"] = np.cos(df["month"]*(2.*np.pi/12))
df["dayofyear_sin"] = np.sin(df["dayofyear"]*(2.*np.pi/365))
df["dayofyear_cos"] = np.cos(df["dayofyear"]*(2.*np.pi/365))
df["weekofyear_sin"] = np.sin(df["weekofyear"]*(2.*np.pi/52))
df["weekofyear_cos"] = np.cos(df["weekofyear"]*(2.*np.pi/52))
df["dayofweek_sin"] = np.sin(df["dayofweek"]*(2.*np.pi/7))
df["dayofweek_cos"] = np.cos(df["dayofweek"]*(2.*np.pi/7))
df["quarter_sin"] = np.sin(df["quarter"]*(2.*np.pi/4))
df["quarter_cos"] = np.cos(df["quarter"]*(2.*np.pi/4))

############### MATRIX MULTIPLICATION

#exemple1:

x = df_pm[pm_alt['AVAILABLE'][pm_alt['AVAILABLE'].isin(data.columns.tolist())]]# matrix m rows * n columns
y = pm_alt['PANIER_MOYEN'][pm_alt['AVAILABLE'].isin(data.columns.tolist())]
y = np.diag(y)

mx = np.matrix(x)
my = np.matrix(y)

choiceset_panier_tr = mx*my


############### REGULAR EXPRESSION
#exemple1:
all_panier_moyen = []
for element in df_final.columns:
    searched = re.search('(?<=panier_moyen_)\w+', element)
    if searched != None:
        all_panier_moyen.append('panier_moyen_' + searched.group())

#exemple2:
cs_palier_choisi=[]
for element in pm['CS_PALIER']:
    searched = re.search('(?<=AZ)\d+|(?<=AP)\d+|(?<=BZ)\d+|(?<=AP)\d+', element)
    if searched != None:
        cs_palier_choisi.append(element)

#exemple3:
market = []
for element in data.columns:
    searched = re.search('(?<=mkt)(\w+)-(\w+)', element)
    if searched != None:
        market.append('mkt' + searched.group())


############### MERGE DATAFRAME
#exemple1:
df = pd.merge(df1, df2[['PANIER_MOYEN', 'AVAILABLE']], how='inner', left_on='val_panier_min', right_on='PANIER_MOYEN')

#exemple2:
df = pd.merge(df1, df2, how='left', on=['alternativeString'])

